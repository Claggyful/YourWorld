<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//
// Initialise the camera
//
screen=-1;

//Directions the camera is facing (X/Y axis and Z axis)
dir=0
zdir=180
CameraX = 0;
CameraY = 0;
CameraZ = -1000;

FOV = 80;
AspectRatio = room_width/room_height;

// clip zone based on camera position and height
GroundX1=0;
GroundY1=0;
GroundX2=0;
GroundY2=0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( global.Camera!=id ) exit;

// Calculate what grid tiles we can see
CalcClipSpace();

/*
if( os_type ==os_android ){
    if( !surface_exists(screen) ){
        screen = surface_create(view_wview[0], view_hview[0] );
        view_surface_id[0] = screen;
    }
}
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Camera controls
/*
//Set four temporary variables to whether the player is pressing each of the four direction buttons
var Cl,Cu,Cr,Cd;
Cu=keyboard_check(ord("W")) or keyboard_check(vk_up);
Cl=keyboard_check(ord("A")) or keyboard_check(vk_left);
Cd=keyboard_check(ord("S")) or keyboard_check(vk_down);
Cr=keyboard_check(ord("D")) or keyboard_check(vk_right);

//Forward/backward and strafing speed (quartered if you're holding left shift)
var CameraVSpeed=global.YSpeed; 
var CameraHSpeed=global.XSpeed; 

if(keyboard_check(vk_lshift) )
{
    CameraVSpeed/=4; 
    CameraHSpeed/=4; 
}
if((global.Mode==MODE_PLAY) )
{
    CameraVSpeed*=-1;
    CameraHSpeed*=-1;
}

//Move the camera if you're telling it to
if Cu {CameraX+=lengthdir_x(CameraVSpeed,dir   );CameraY+=lengthdir_y(CameraVSpeed,dir   );}
if Cl {CameraX+=lengthdir_x(CameraHSpeed,dir-90);CameraY+=lengthdir_y(CameraHSpeed,dir-90);}
if Cd {CameraX-=lengthdir_x(CameraVSpeed,dir   );CameraY-=lengthdir_y(CameraVSpeed,dir   );}
if Cr {CameraX+=lengthdir_x(CameraHSpeed,dir+90);CameraY+=lengthdir_y(CameraHSpeed,dir+90);}
*/

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw GUI
//d3d_transform_set_identity();
//d3d_set_perspective(false);              

/*
if( global.WaitText!="" )
{
        draw_set_font(arial);
        draw_outline( 400,(room_height/2)-20, global.WaitText, c_white );
}else{
    if( instance_exists(global.Map)){
        if( surface_exists(global.Map.DiffuseSurface) ){
            if( os_type ==os_android ){
                draw_surface_stretched(screen,0,0,1920,1080);
            }else{
                draw_surface(global.Map.DiffuseSurface,0,0);
            }
        }
        //if( surface_exists(global.Map.SelectionSurface) ){
        //    draw_surface_stretched(global.Map.SelectionSurface,0,0,window_get_width(),window_get_height());
        //}
    }
    
    
    draw_set_font(arial);
    var s,aa,vs;      
    switch(display_aa)
    {
        case 2:  aa="2"; break;
        case 4:  aa="4"; break;
        case 6:  aa="2,4"; break;
        case 8:  aa="8"; break;
        case 10: aa="2,8"; break;
        case 12: aa="4,8"; break;
        case 14: aa="2,4,8"; break;
        default: aa="none";
    }
    
    if( vsync ) {
        vs = "ON";
    }else{
        vs = "OFF";
    }

    s = "W=("+string(window_get_width())+","+string(window_get_height())+")  AA Levels available="+string(aa);
    s = s+ "   (VSYNC:"+vs+")";
    s = s+ " px="+string(Map.MouseX)+",py="+string(Map.MouseY);
    draw_outline( 40,2, s, c_white );
    
    s = "fps="+string(fps)+"  cubes="+string(global.cubes)+"  polys="+string(global.CurrentPolyCount)+", total="+string(global.polys)+"  p="+string(Map.PickedColour);
    draw_outline( 40,22, s, c_white );
    
    s = "cube=("+string(Map.PickX)+","+string(Map.PickY)+","+string(Map.PickZ)+") - face="+GetFace(Map.PickFace);
    draw_outline( 40,42, s, c_white );    
    
    var modestring=string(global.Mode); if global.Mode==MODE_EDIT modestring="Edit"; if global.Mode==MODE_PLAY modestring="Play";
    s = "mode="+modestring+" (&lt;M&gt; switch)";
    draw_outline( 40,62, s, c_white );
}
*/    


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{      
/*
    if( global.WaitText!="" )
    {
    }else{
    
        // Work out unit light vector
        var lx,ly,lz;
        lx = 0.5;
        ly = 0.0;
        lz =  1.0;
        var d = 1.0/sqrt(lx*lx+ly*ly+lz*lz);
        lx = lx*d;
        ly = ly*d;
        lz = lz*d;
        
        if global.Mode==MODE_EDIT &amp;&amp; !instance_exists(oHUDParent)
        {
            dir += (display_mouse_get_x()-display_get_width()/2)/6
            zdir += (display_mouse_get_y()-display_get_height()/2)/6
            zdir = clamp(zdir,-80,+80)
            display_mouse_set(display_get_width()/2,display_get_height()/2)
        }
        else
        {
            dir = 90;
            zdir = +80;
        }    
        
        SetProjection();      
        //d3d_set_projection_ext(CameraX,CameraY,CameraZ,  CameraX,CameraY,1024, 0,1,0,  FOV, AspectRatio,  32, 20000.0);
        
        global.CurrentPolyCount = 0;
    }       
*/
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
