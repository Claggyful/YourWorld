<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Read the binary map format
/*var map_buff;
if( os_browser==browser_not_a_browser ){
    map_buff = buffer_load("map.dat");
    show_debug_message("Native: "+string(map_buff));
}else{
    map_buff = buffer_load("map.txt");
    show_debug_message("HTML5: "+map_buff);
}
*/

StyleSprite=sStyle1;
//CreatreMap(width,height,depth, gridcachesize, sidebase,topbase,pavement, tilesize,tileborder);
CreateMap(256,256,6, 16, 0,7,7, 64,70);


// Create the Vertex Format we'll use
vertex_format_begin();
vertex_format_add_position_3d();
vertex_format_add_normal();
//vertex_format_add_colour();
vertex_format_add_textcoord();
CityFormat = vertex_format_end();
global.CityFormat = CityFormat;


//buffer_delete(map_buff);

// DL: MRT surfaces
surfMRT0 = -1;
surfMRT1 = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var camera = global.Camera;

// DL: Maintain surfaces
if(!surface_exists(surfMRT0))
{
    surfMRT0 = surface_create(view_wview[0], view_hview[0]);
}
if(!surface_exists(surfMRT1))
{
    surfMRT1 = surface_create(view_wview[0], view_hview[0]);
}

// Work out visible map bounds.
var gx1 = floor( camera.GroundX1/TileSize/GridCacheSize );
var gy1 = floor( camera.GroundY1/TileSize/GridCacheSize );
var gx2 = floor( (camera.GroundX2+(GridCacheSize*TileSize)-1)/TileSize/GridCacheSize );
var gy2 = floor( (camera.GroundY2+(GridCacheSize*TileSize)-1)/TileSize/GridCacheSize );
global.TotalGridBlocks = (gx2-gx1)*(gy2-gy1);

surface_set_target_ext(0, surfMRT0);
surface_set_target_ext(1, surfMRT1);

//surface_set_target(surfMRT0);
       
{
        d3d_start();
        d3d_set_perspective(true);
        d3d_set_hidden(true);
        d3d_set_culling(true); 
        //d3d_set_projection_perspective(0,0, room_width, room_height, 90);
        d3d_set_projection_ext(camera.CameraX,camera.CameraY,camera.CameraZ,  camera.CameraX,camera.CameraY,1024, 0,1,0,  camera.FOV, camera.AspectRatio,  32, 20000.0);
       draw_set_color(c_red);
       d3d_set_lighting(true);
       d3d_light_define_direction(0,0.5,0,1, c_white);
       d3d_light_enable(0,true);
       
       d3d_transform_set_rotation_z( camera.ZAngle );
       d3d_transform_add_rotation_x( camera.XAngle );
       
        
       
        d3d_set_lighting(false);
        draw_enable_alphablend(false);
        draw_clear(c_red);
        //shader_set( SimpleShader );
        shader_set( SimpleShaderHLSL );
        var texture;
        texture = sprite_get_texture(StyleSprite,0);
        

        global.TileCacheCreationCount = 2;
        var CacheWidth = floor(MapWidth/GridCacheSize);
        var CacheHeight = floor(MapWidth/GridCacheSize);
        for(var yy=gy1;yy&lt;gy2;yy++){
            for(var xx=gx1;xx&lt;gx2;xx++){
                if( xx&gt;=0 &amp;&amp; xx&lt;CacheWidth) &amp;&amp; (yy&gt;=0 &amp;&amp; yy&lt;CacheHeight)
                {
                    var MeshA = GetCacheEntry(xx,yy);
                    if( is_array(MeshA) ){
                        vertex_submit(MeshA[0], pr_trianglelist,texture);
                        global.CurrentPolyCount += MeshA[1];
                    }
                }
            }
        }        
        shader_reset();
        d3d_transform_set_identity();
        d3d_set_perspective(false);
        draw_enable_alphablend(true);

       d3d_set_lighting(false);              
       
}

surface_reset_target();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
