<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Read the binary map format
/*var map_buff;
if( os_browser==browser_not_a_browser ){
    map_buff = buffer_load("map.dat");
    show_debug_message("Native: "+string(map_buff));
}else{
    map_buff = buffer_load("map.txt");
    show_debug_message("HTML5: "+map_buff);
}
*/

StyleSprite=sStyle1;
//CreatreMap(width,height,depth, gridcachesize, sidebase,topbase,pavement, tilesize,tileborder);
CreateMap(256,256,10, 16, 0,7,7, 64,70);


// Create the Vertex Format we'll use
vertex_format_begin();
vertex_format_add_position_3d();
vertex_format_add_normal();
vertex_format_add_colour();
vertex_format_add_textcoord();
CityFormat = vertex_format_end();
global.CityFormat = CityFormat;

DiffuseSurface = -1;
SelectionSurface = -1;
PickedColour="$00000000";
DoPick=false;
MouseX=0;
MouseY=0;
PickY=-1;
PickX=-1;
PickZ=-1;
PickFace=-1;
EditMode = 1;
PickButton=0;
//buffer_delete(map_buff);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( DoPick==2 )
{
    if( EditMode==1 ){
        //show_debug_message("click ("+string(PickX)+","+string(PickY)+","+string(PickZ)+")");

        if( PickButton==1 )
        {
            var xx,yy,zz;
            dx=0;
            dy=0;
            dz=0;
            xx=PickX;
            yy=PickY;
            zz=PickZ; 
            switch(PickFace){
                case 1:yy--; break;
                case 2:yy++; break;
                case 3:xx--; break;
                case 4:xx++; break;
                case 5:zz++; break;
                case 6:zz--; break;
            }

            if(( zz&gt;=0 &amp;&amp; zz&lt;MapDepth ) &amp;&amp; (xx&gt;=0 &amp;&amp; xx&lt;MapWidth) &amp;&amp; (yy&gt;=0 &amp;&amp; yy&lt;MapHeight))
            {
        
                var blk = AllocBlock(xx,yy,zz);
                
                info[0] =  0;      // block flags (32bits)
                info[1] = 1;      // left
                info[2] = 1;      // right
                info[3] = 1;      // top
                info[4] = 1;      // bottom
                info[5] = 1;      // lid
                info[6] = 1;      // behind (usually hidden)
                block_info[blk]=info;
                FreeCacheEntry(xx,yy);   
            }
        }
        if( PickButton==2 )
        {
            if( PickZ&gt;0 )
            {
                var xx,yy,zz;
                xx=PickX;
                yy=PickY;
                zz=PickZ; // set the block ABOVE
        
                FreeBlock(xx,yy,zz);
                FreeCacheEntry(xx,yy);   
            }
        }
        PickButton=0;  
               
    }
    
    
    DoPick=0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="54">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( DoPick!=0 ) exit;
MouseX = mouse_x;
MouseY = mouse_y;
PickButton=2;
DoPick = 1;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( DoPick!=0 ) exit;
MouseX = mouse_x;
MouseY = mouse_y;
PickButton=1;
DoPick = 1;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var camera = global.Camera;
if( !surface_exists(DiffuseSurface) ){
    DiffuseSurface = surface_create(view_wport[0],view_hport[0] );
}
if( !surface_exists(SelectionSurface) ){
    SelectionSurface = surface_create(view_wport[0],view_hport[0] );
}


// Work out visible map bounds.
var gx1 = floor( camera.GroundX1/TileSize/GridCacheSize );
var gy1 = floor( camera.GroundY1/TileSize/GridCacheSize );
var gx2 = floor( (camera.GroundX2+(GridCacheSize*TileSize)-1)/TileSize/GridCacheSize );
var gy2 = floor( (camera.GroundY2+(GridCacheSize*TileSize)-1)/TileSize/GridCacheSize );
global.TotalGridBlocks = (gx2-gx1)*(gy2-gy1);

       
{           
       draw_set_color(c_red);
       d3d_set_lighting(true);
       d3d_light_define_direction(0,0.5,0,1, c_white);
       d3d_light_enable(0,true);
       
       d3d_transform_set_rotation_z( camera.ZAngle );
       d3d_transform_add_rotation_x( camera.XAngle );
       
        
       
        d3d_set_lighting(false);
        draw_enable_alphablend(false);

        var cam = global.Camera;

        surface_set_target(DiffuseSurface);
        surface_set_target_ext(1,SelectionSurface);
        draw_clear_alpha(c_black,0);
        d3d_set_projection_ext(cam.CameraX,cam.CameraY,cam.CameraZ,  cam.CameraX,cam.CameraY,1024, 0,1,0,  cam.FOV, cam.AspectRatio,  32, 20000.0);
        
        
        shader_set( RenderPlusSelection );
        var texture;
        texture = sprite_get_texture(StyleSprite,0);
        

        global.TileCacheCreationCount = 2;
        var CacheWidth = floor(MapWidth/GridCacheSize);
        var CacheHeight = floor(MapWidth/GridCacheSize);
        for(var yy=gy1;yy&lt;gy2;yy++){
            for(var xx=gx1;xx&lt;gx2;xx++){
                if( xx&gt;=0 &amp;&amp; xx&lt;CacheWidth) &amp;&amp; (yy&gt;=0 &amp;&amp; yy&lt;CacheHeight)
                {
                    var MeshA = GetCacheEntry(xx,yy);
                    if( is_array(MeshA) ){
                        vertex_submit(MeshA[0], pr_trianglelist,texture);
                        global.CurrentPolyCount += MeshA[1];
                    }
                }
            }
        }        
        shader_reset();
        draw_enable_alphablend(true);        
        surface_reset_target();
        

        
        if( DoPick==1 )
        {
            var col = surface_getpixel( SelectionSurface, MouseX,MouseY );
            PickedColour=Hex(col);
            var c = col&amp;$3ffffff;
            c = ((c&gt;&gt;16)&amp;$ff) | (c&amp;$ff00ff00) | ((c&amp;$ff)&lt;&lt;16);          // swap R&amp;B channels so we get ARGB again
            PickY = c div (MapDepth*MapWidth);
            PickX = (c-(PickY*(MapDepth*MapWidth))) div (MapDepth);
            PickZ = floor(c mod MapDepth);
            PickFace = (col&gt;&gt;26)&amp;7;
            DoPick=2;
        }
        
                
        d3d_set_lighting(false);              
       
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="113">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var buff = buffer_load("test.map");
LoadMap(id,buff);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="112">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var buff = SaveMap(id);
buffer_save(buff,"test.map");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surface_save(DiffuseSurface,"background.png");
surface_save(SelectionSurface,"selection.png");

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
