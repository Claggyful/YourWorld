<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>rotate_value=(global.FlipRotateFlags &amp; 4);

if (global.FlipRotateFlags &amp; 1==1 &amp;&amp; global.FlipRotateFlags &amp; 2==1)
{
    rotate_value+=2
}

dovflip=(global.FlipRotateFlags &amp; 1)^(rotate_value&gt;1)
dohflip=(global.FlipRotateFlags &amp; 2)^(rotate_value&gt;1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw and operate HUD top buttons

var buttonX=0;  //Current button X
var buttonY=0;  //Current button Y
var buttonI=0;  //Current button Sprite Index
var buttonS=39; //Current button size in pixels

draw_set_color(c_black)
draw_rectangle(0,0,window_get_width(),40,0)

//Open
draw_set_color(ColorButton(mouse_hold_rectangle(buttonX,buttonY,buttonX+buttonS,buttonY+buttonS)))
draw_rectangle(buttonX,buttonY,buttonX+buttonS,buttonY+buttonS,0)
draw_sprite(sButtonNavbar,buttonI,buttonX,buttonY)
if ( mouse_release_rectangle(buttonX,buttonY,buttonX+buttonS,buttonY+buttonS) )
{
    with(oMap) event_perform(ev_keypress,vk_f3)        
}
buttonX+=buttonS
buttonI+=1

//Save
draw_set_color(ColorButton(mouse_hold_rectangle(buttonX,buttonY,buttonX+buttonS,buttonY+buttonS)))
draw_rectangle(buttonX,buttonY,buttonX+buttonS,buttonY+buttonS,0)
draw_sprite(sButtonNavbar,buttonI,buttonX,buttonY)
if ( mouse_release_rectangle(buttonX,buttonY,buttonX+buttonS,buttonY+buttonS) )
{
    with(oMap) event_perform(ev_keypress,vk_f2)       
}
buttonX+=(buttonS*2)
buttonI+=1

//Select
draw_set_color(c_black)
draw_rectangle(buttonX,buttonY,buttonX+buttonS,buttonY+buttonS,0)
draw_sprite(sButtonNavbar,buttonI,buttonX,buttonY)
if ( mouse_release_rectangle(buttonX,buttonY,buttonX+buttonS,buttonY+buttonS) )
{
        
}
buttonX+=(buttonS*2)
buttonI+=1

//Block
draw_set_color(ColorButton(global.EditorMode==EDIT_SELECTION))
draw_rectangle(buttonX,buttonY,buttonX+buttonS,buttonY+buttonS,0)
draw_sprite(sButtonNavbar,buttonI,buttonX,buttonY)
if ( mouse_release_rectangle(buttonX,buttonY,buttonX+buttonS,buttonY+buttonS) )
{
    global.EditorMode=EDIT_SELECTION;
    global.EditorMode_Sub=EDIT_SUB_NONE;        
}
buttonX+=buttonS
buttonI+=1

//Tile Tops
draw_set_color(ColorButton(global.EditorMode==EDIT_PAINT &amp;&amp; global.EditorMode_Sub==EDIT_SUB_LID))
draw_rectangle(buttonX,buttonY,buttonX+buttonS,buttonY+buttonS,0)
draw_sprite(sButtonNavbar,buttonI,buttonX,buttonY)
if ( mouse_release_rectangle(buttonX,buttonY,buttonX+buttonS,buttonY+buttonS) )
{
    global.EditorMode=EDIT_PAINT;
    global.EditorMode_Sub=EDIT_SUB_LID;
    
    if !instance_exists(oHUDTileSelect)
    {
        with(oHUDParent) instance_destroy()
        instance_create(60,60,oHUDTileSelect)
    }
    else
    {
        with(oHUDParent) instance_destroy()
    }        
}
buttonX+=buttonS
buttonI+=1

//Tile Sides
draw_set_color(ColorButton(global.EditorMode==EDIT_PAINT &amp;&amp; global.EditorMode_Sub==EDIT_SUB_SIDE))
draw_rectangle(buttonX,buttonY,buttonX+buttonS,buttonY+buttonS,0)
draw_sprite(sButtonNavbar,buttonI,buttonX,buttonY)
if ( mouse_release_rectangle(buttonX,buttonY,buttonX+buttonS,buttonY+buttonS) )
{
    global.EditorMode=EDIT_PAINT;
    global.EditorMode_Sub=EDIT_SUB_SIDE;
    
    if !instance_exists(oHUDTileSelect)
    {
        with(oHUDParent) instance_destroy()
        instance_create(60,60,oHUDTileSelect)
    }
    else
    {
        with(oHUDParent) instance_destroy()
    }        
}
buttonX+=buttonS
buttonI+=1

//Decals
draw_set_color(ColorButton(global.EditorMode==EDIT_SPRITES))
draw_rectangle(buttonX,buttonY,buttonX+buttonS,buttonY+buttonS,0)
draw_sprite(sButtonNavbar,buttonI,buttonX,buttonY)
if ( mouse_release_rectangle(buttonX,buttonY,buttonX+buttonS,buttonY+buttonS) )
{
    global.EditorMode=EDIT_SPRITES;
    global.EditorMode_Sub=EDIT_SUB_NONE;        
}
buttonX+=buttonS
buttonI+=1

//Object
draw_set_color(ColorButton(global.EditorMode==EDIT_OBJECTS))
draw_rectangle(buttonX,buttonY,buttonX+buttonS,buttonY+buttonS,0)
draw_sprite(sButtonNavbar,buttonI,buttonX,buttonY)
if ( mouse_release_rectangle(buttonX,buttonY,buttonX+buttonS,buttonY+buttonS) )
{
    global.EditorMode=EDIT_OBJECTS;
    global.EditorMode_Sub=EDIT_SUB_NONE;        
}
buttonX+=(buttonS*2)
buttonI+=1

//Rotate
if ( mouse_release_rectangle(buttonX,buttonY,buttonX+buttonS,buttonY+buttonS) )
{
    global.FlipRotateFlags=0;
    rotate_value=(rotate_value+1)&amp;3;
    switch(rotate_value)
    {
        case 1: global.FlipRotateFlags=4; break;
        case 2: global.FlipRotateFlags=3; break;
        case 3: global.FlipRotateFlags=7; break;
    }
    if(dovflip) global.FlipRotateFlags^=1;            
    if(dohflip) global.FlipRotateFlags^=2; 
}
buttonI+=rotate_value
draw_set_color(ColorButton(mouse_hold_rectangle(buttonX,buttonY,buttonX+buttonS,buttonY+buttonS)))
draw_rectangle(buttonX,buttonY,buttonX+buttonS,buttonY+buttonS,0)
draw_sprite(sButtonNavbar,buttonI,buttonX,buttonY)
buttonX+=buttonS
buttonI+=3-rotate_value
buttonI+=1


//Flip Horizontally
draw_set_color(ColorButton(mouse_hold_rectangle(buttonX,buttonY,buttonX+buttonS,buttonY+buttonS)))
draw_rectangle(buttonX,buttonY,buttonX+buttonS,buttonY+buttonS,0)
draw_sprite(sButtonNavbar,buttonI,buttonX,buttonY)
if ( mouse_release_rectangle(buttonX,buttonY,buttonX+buttonS,buttonY+buttonS) )
{
    global.FlipRotateFlags^=2;
}
buttonX+=buttonS
buttonI+=1

//Flip Vertically
draw_set_color(ColorButton(mouse_hold_rectangle(buttonX,buttonY,buttonX+buttonS,buttonY+buttonS)))
draw_rectangle(buttonX,buttonY,buttonX+buttonS,buttonY+buttonS,0)
draw_sprite(sButtonNavbar,buttonI,buttonX,buttonY)
if ( mouse_release_rectangle(buttonX,buttonY,buttonX+buttonS,buttonY+buttonS) )
{
    global.FlipRotateFlags^=1;        
}
buttonX+=(buttonS*2)
buttonI+=1           

//Play
draw_set_color(ColorButton(mouse_hold_rectangle(buttonX,buttonY,buttonX+buttonS,buttonY+buttonS)))
draw_rectangle(buttonX,buttonY,buttonX+buttonS,buttonY+buttonS,0)
draw_sprite(sButtonNavbar,buttonI,buttonX,buttonY)
if ( mouse_release_rectangle(buttonX,buttonY,buttonX+buttonS,buttonY+buttonS) )
{
                
}
buttonX+=buttonS
buttonI+=1

//Hide Menu
draw_set_color(ColorButton(mouse_hold_rectangle(buttonX,buttonY,buttonX+buttonS,buttonY+buttonS)))
draw_rectangle(buttonX,buttonY,buttonX+buttonS,buttonY+buttonS,0)
draw_sprite(sButtonNavbar,buttonI,buttonX,buttonY)
if ( mouse_release_rectangle(buttonX,buttonY,buttonX+buttonS,buttonY+buttonS) )
{
    with(oHUDMain) instance_destroy()
    with(oHUDParent) instance_destroy()
    with(oController) FreeCursorMode=0;            
}
buttonX+=buttonS
buttonI+=1



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
