<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create everything
global.XSpeed = 16;
global.YSpeed = 16;
global.ZSpeed = 32;
global.Mode = MODE_PLAY;


GameCamera = instance_create(0,0,oCamera);
//EditorCamera = instance_create(0,0,oCamera);
SetCamera(GameCamera);


Map = instance_create(0,0,oMap);
global.Map = Map;
global.CurrentPolyCount = 0;


dir =0;
zdir=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle everything - states, movement etc.

// Toggle between game and editor
var key=keyboard_check(ord("M"));
if( key!=0 ){
    if( global.Mode==MODE_EDIT ){
        global.Mode=MODE_PLAY;
    }else if( global.Mode==MODE_PLAY ){
        global.Mode=MODE_EDIT;
    }
}



if( global.Mode== MODE_PLAY ){
    ProcessGame();
}else if( global.Mode== MODE_EDIT ){
    ProcessEditor();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw GUI etc

d3d_transform_set_identity();
d3d_set_perspective(false);              

if( instance_exists(global.Map)){
    if( surface_exists(global.Map.DiffuseSurface) ){
        draw_surface(global.Map.DiffuseSurface,0,0);
    }
}

draw_set_font(arial);
draw_set_halign(fa_left)
draw_set_valign(fa_top)
var s,aa,vs;      
var cam = global.Camera;


s = "("+string(cam.GroundX1)+","+string(cam.GroundY1)+","+string(cam.GroundX2)+","+string(cam.GroundY2)+")";
draw_outline( 40,2, s, c_white );

/// Draw GUI

/*
if( global.WaitText!="" )
{
        draw_set_font(arial);
        draw_outline( 400,(room_height/2)-20, global.WaitText, c_white );
}else{
    draw_set_font(arial);
    var s,aa,vs;      
    switch(display_aa)
    {
        case 2:  aa="2"; break;
        case 4:  aa="4"; break;
        case 6:  aa="2,4"; break;
        case 8:  aa="8"; break;
        case 10: aa="2,8"; break;
        case 12: aa="4,8"; break;
        case 14: aa="2,4,8"; break;
        default: aa="none";
    }
    
    if( vsync ) {
        vs = "ON";
    }else{
        vs = "OFF";
    }

    s = "W=("+string(window_get_width())+","+string(window_get_height())+")  AA Levels available="+string(aa);
    s = s+ "   (VSYNC:"+vs+")";
    s = s+ " px="+string(Map.MouseX)+",py="+string(Map.MouseY);
    draw_outline( 40,2, s, c_white );
    
    s = "fps="+string(fps)+"  cubes="+string(global.cubes)+"  polys="+string(global.CurrentPolyCount)+", total="+string(global.polys)+"  p="+string(Map.PickedColour);
    draw_outline( 40,22, s, c_white );
    
    s = "cube=("+string(Map.PickX)+","+string(Map.PickY)+","+string(Map.PickZ)+") - face="+GetFace(Map.PickFace);
    draw_outline( 40,42, s, c_white );    
    
    var modestring=string(global.Mode); if global.Mode==MODE_EDIT modestring="Edit"; if global.Mode==MODE_PLAY modestring="Play";
    s = "mode="+modestring+" (&lt;M&gt; switch)";
    draw_outline( 40,62, s, c_white );
}
*/    


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
{
    // Initialise 3D
    d3d_start();
    d3d_set_perspective(true);
    d3d_set_hidden(true);
    d3d_set_culling(true);        
    d3d_set_projection_perspective(0,0, room_width, room_height, 90);  

        
                        // Work out unit light vector
        var lx,ly,lz;
        lx = 0.5;
        ly = 0.0;
        lz =  1.0;
        var d = 1.0/sqrt(lx*lx+ly*ly+lz*lz);
        lx = lx*d;
        ly = ly*d;
        lz = lz*d;
        
/*        if global.Mode==MODE_EDIT
        {
            dir += (display_mouse_get_x()-display_get_width()/2)/6
            zdir += (display_mouse_get_y()-display_get_height()/2)/6
            zdir = clamp(zdir,-80,+80)
            display_mouse_set(display_get_width()/2,display_get_height()/2)
        }
        else
        {
            dir = 90;
            zdir = +80;
        }    
*/                
        SetProjection(global.Camera);
        
        global.CurrentPolyCount = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.Mode==MODE_EDIT)
{
    if !instance_exists(oHUDTileSelect)
    {
        instance_create(64,64,oHUDTileSelect)
    }
    else
    {
        with(oHUDTileSelect) instance_destroy()
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="27">
      <action>
        <libid>1</libid>
        <id>332</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_end_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
